{"ast":null,"code":"const fs = require(\"fs-extra\");\nconst path = require(\"path\");\nconst {\n  web3\n} = require(\"./web3\");\nconst compiledContract = require(\"../contract/ptTrans.json\");\nconst circularJSON = require('circular-json');\nconst deploy = async mymessage => {\n  try {\n    // 設定收據路徑\n    const receiptPath = path.resolve(__dirname, \".\", `receipt-metamask.json`);\n    console.log(`---------- 收據路徑 ---------- ${receiptPath}`);\n\n    // 使用 accounts[0] 部署合約\n    const accounts = await web3.eth.getAccounts();\n    console.log(`嘗試使用帳戶進行部署，帳戶：${accounts[0]}`);\n\n    /**\r\n     * 部署合約需要使用合約介面和合約的 bytecode\r\n     * 我們從編譯的智能合約中獲取這兩個資訊\r\n     * 編譯後的智能合約以 JSON 格式保存在 contract 資料夾中\r\n     */\n    const result = await new web3.eth.Contract(compiledContract.abi).deploy({\n      data: \"0x\" + compiledContract.data.bytecode.object,\n      arguments: [mymessage]\n    }).send({\n      gas: 3000000,\n      from: accounts[0]\n    });\n    console.log(`合約已部署至地址：${result.options.address}`);\n\n    // 使用 CircularJson 將嵌套的物件轉換為字串，以便保存為 JSON\n    const serialized = circularJSON.stringify(result.options);\n\n    // 將收據地址保存到收據路徑中\n    fs.writeJsonSync(receiptPath, result.options);\n    console.log(\"收據已成功保存\");\n    return serialized;\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n};\nmodule.exports = deploy;","map":{"version":3,"names":["fs","require","path","web3","compiledContract","circularJSON","deploy","mymessage","receiptPath","resolve","__dirname","console","log","accounts","eth","getAccounts","result","Contract","abi","data","bytecode","object","arguments","send","gas","from","options","address","serialized","stringify","writeJsonSync","error","module","exports"],"sources":["C:/Users/wwwna/Desktop/test/src/ethereum/deploy.js"],"sourcesContent":["const fs = require(\"fs-extra\");\r\nconst path = require(\"path\");\r\nconst { web3 } = require(\"./web3\");\r\nconst compiledContract = require(\"../contract/ptTrans.json\");\r\nconst circularJSON = require('circular-json');\r\n\r\nconst deploy = async (mymessage) => {\r\n    try {\r\n        // 設定收據路徑\r\n        const receiptPath = path.resolve(__dirname, \".\", `receipt-metamask.json`);\r\n        console.log(`---------- 收據路徑 ---------- ${receiptPath}`);\r\n\r\n        // 使用 accounts[0] 部署合約\r\n        const accounts = await web3.eth.getAccounts();\r\n        console.log(`嘗試使用帳戶進行部署，帳戶：${accounts[0]}`);\r\n\r\n        /**\r\n         * 部署合約需要使用合約介面和合約的 bytecode\r\n         * 我們從編譯的智能合約中獲取這兩個資訊\r\n         * 編譯後的智能合約以 JSON 格式保存在 contract 資料夾中\r\n         */\r\n        const result = await new web3.eth.Contract(\r\n            compiledContract.abi\r\n        )\r\n            .deploy({ data: \"0x\" + compiledContract.data.bytecode.object, arguments: [mymessage] })\r\n            .send({ gas: 3000000, from: accounts[0] });\r\n        console.log(`合約已部署至地址：${result.options.address}`);\r\n\r\n        // 使用 CircularJson 將嵌套的物件轉換為字串，以便保存為 JSON\r\n        const serialized = circularJSON.stringify(result.options);\r\n\r\n        // 將收據地址保存到收據路徑中\r\n        fs.writeJsonSync(receiptPath, result.options);\r\n\r\n        console.log(\"收據已成功保存\");\r\n        return serialized;\r\n    } catch (error) {\r\n        console.error(error);\r\n        return error;\r\n    }\r\n};\r\n\r\nmodule.exports = deploy;\r\n"],"mappings":"AAAA,MAAMA,EAAE,GAAGC,OAAO,CAAC,UAAU,CAAC;AAC9B,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAM;EAAEE;AAAK,CAAC,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAClC,MAAMG,gBAAgB,GAAGH,OAAO,CAAC,0BAA0B,CAAC;AAC5D,MAAMI,YAAY,GAAGJ,OAAO,CAAC,eAAe,CAAC;AAE7C,MAAMK,MAAM,GAAG,MAAOC,SAAS,IAAK;EAChC,IAAI;IACA;IACA,MAAMC,WAAW,GAAGN,IAAI,CAACO,OAAO,CAACC,SAAS,EAAE,GAAG,EAAG,uBAAsB,CAAC;IACzEC,OAAO,CAACC,GAAG,CAAE,8BAA6BJ,WAAY,EAAC,CAAC;;IAExD;IACA,MAAMK,QAAQ,GAAG,MAAMV,IAAI,CAACW,GAAG,CAACC,WAAW,CAAC,CAAC;IAC7CJ,OAAO,CAACC,GAAG,CAAE,iBAAgBC,QAAQ,CAAC,CAAC,CAAE,EAAC,CAAC;;IAE3C;AACR;AACA;AACA;AACA;IACQ,MAAMG,MAAM,GAAG,MAAM,IAAIb,IAAI,CAACW,GAAG,CAACG,QAAQ,CACtCb,gBAAgB,CAACc,GACrB,CAAC,CACIZ,MAAM,CAAC;MAAEa,IAAI,EAAE,IAAI,GAAGf,gBAAgB,CAACe,IAAI,CAACC,QAAQ,CAACC,MAAM;MAAEC,SAAS,EAAE,CAACf,SAAS;IAAE,CAAC,CAAC,CACtFgB,IAAI,CAAC;MAAEC,GAAG,EAAE,OAAO;MAAEC,IAAI,EAAEZ,QAAQ,CAAC,CAAC;IAAE,CAAC,CAAC;IAC9CF,OAAO,CAACC,GAAG,CAAE,YAAWI,MAAM,CAACU,OAAO,CAACC,OAAQ,EAAC,CAAC;;IAEjD;IACA,MAAMC,UAAU,GAAGvB,YAAY,CAACwB,SAAS,CAACb,MAAM,CAACU,OAAO,CAAC;;IAEzD;IACA1B,EAAE,CAAC8B,aAAa,CAACtB,WAAW,EAAEQ,MAAM,CAACU,OAAO,CAAC;IAE7Cf,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;IACtB,OAAOgB,UAAU;EACrB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZpB,OAAO,CAACoB,KAAK,CAACA,KAAK,CAAC;IACpB,OAAOA,KAAK;EAChB;AACJ,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG3B,MAAM"},"metadata":{},"sourceType":"module"}