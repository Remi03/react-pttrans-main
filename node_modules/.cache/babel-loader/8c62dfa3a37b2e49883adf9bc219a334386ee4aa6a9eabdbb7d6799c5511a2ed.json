{"ast":null,"code":"import Web3 from 'web3';\nimport compiledContract from '../contract/ptTrans.json';\nconst deploy = async mymessage => {\n  try {\n    // 建立 Web3 連接\n    const web3 = new Web3(window.ethereum);\n\n    // 取得帳戶\n    const accounts = await web3.eth.requestAccounts();\n    console.log(`嘗試使用帳戶進行部署，帳戶：${accounts[0]}`);\n\n    /**\r\n     * 部署合約需要使用合約介面和合約的 bytecode\r\n     * 我們從編譯的智能合約中獲取這兩個資訊\r\n     * 編譯後的智能合約以 JSON 格式保存在 contract 資料夾中\r\n     */\n    const result = await new web3.eth.Contract(compiledContract.abi).deploy({\n      data: \"0x\" + compiledContract.data.bytecode.object,\n      arguments: [mymessage]\n    }).send({\n      gas: 3000000,\n      from: accounts[0]\n    });\n    console.log(`合約已部署至地址：${result.options.address}`);\n\n    // 其他邏輯...\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n};\nexport default deploy;\n\n// const fs = require(\"fs-extra\");\n// const path = require(\"path\");\n// const { web3 } = require(\"./web3\");\n// const compiledContract = require(\"../contract/ptTrans.json\");\n// const circularJSON = require('circular-json');\n\n// const deploy = async (mymessage) => {\n//     try {\n//         // 設定收據路徑\n//         const receiptPath = path.resolve(__dirname, \".\", `receipt-metamask.json`);\n//         console.log(`---------- 收據路徑 ---------- ${receiptPath}`);\n\n//         // 使用 accounts[0] 部署合約\n//         const accounts = await web3.eth.getAccounts();\n//         console.log(`嘗試使用帳戶進行部署，帳戶：${accounts[0]}`);\n\n//         /**\n//          * 部署合約需要使用合約介面和合約的 bytecode\n//          * 我們從編譯的智能合約中獲取這兩個資訊\n//          * 編譯後的智能合約以 JSON 格式保存在 contract 資料夾中\n//          */\n//         const result = await new web3.eth.Contract(\n//             compiledContract.abi\n//         )\n//             .deploy({ data: \"0x\" + compiledContract.data.bytecode.object, arguments: [mymessage] })\n//             .send({ gas: 3000000, from: accounts[0] });\n//         console.log(`合約已部署至地址：${result.options.address}`);\n\n//         // 使用 CircularJson 將嵌套的物件轉換為字串，以便保存為 JSON\n//         const serialized = circularJSON.stringify(result.options);\n\n//         // 將收據地址保存到收據路徑中\n//         fs.writeJsonSync(receiptPath, {}, { spaces: 2 });\n//         // fs.writeJsonSync(receiptPath, result.options);\n\n//         console.log(\"收據已成功保存\");\n//         return serialized;\n//     } catch (error) {\n//         console.error(error);\n//         return error;\n//     }\n// };\n\n// module.exports = deploy;","map":{"version":3,"names":["Web3","compiledContract","deploy","mymessage","web3","window","ethereum","accounts","eth","requestAccounts","console","log","result","Contract","abi","data","bytecode","object","arguments","send","gas","from","options","address","error"],"sources":["C:/Users/wwwna/Desktop/test/src/ethereum/deploy.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport compiledContract from '../contract/ptTrans.json';\r\n\r\nconst deploy = async (mymessage) => {\r\n  try {\r\n    // 建立 Web3 連接\r\n    const web3 = new Web3(window.ethereum);\r\n    \r\n    // 取得帳戶\r\n    const accounts = await web3.eth.requestAccounts();\r\n    console.log(`嘗試使用帳戶進行部署，帳戶：${accounts[0]}`);\r\n    \r\n    /**\r\n     * 部署合約需要使用合約介面和合約的 bytecode\r\n     * 我們從編譯的智能合約中獲取這兩個資訊\r\n     * 編譯後的智能合約以 JSON 格式保存在 contract 資料夾中\r\n     */\r\n    const result = await new web3.eth.Contract(\r\n      compiledContract.abi\r\n    )\r\n      .deploy({ data: \"0x\" + compiledContract.data.bytecode.object, arguments: [mymessage] })\r\n      .send({ gas: 3000000, from: accounts[0] });\r\n    console.log(`合約已部署至地址：${result.options.address}`);\r\n\r\n    // 其他邏輯...\r\n\r\n  } catch (error) {\r\n    console.error(error);\r\n    return error;\r\n  }\r\n};\r\n\r\nexport default deploy;\r\n\r\n// const fs = require(\"fs-extra\");\r\n// const path = require(\"path\");\r\n// const { web3 } = require(\"./web3\");\r\n// const compiledContract = require(\"../contract/ptTrans.json\");\r\n// const circularJSON = require('circular-json');\r\n\r\n// const deploy = async (mymessage) => {\r\n//     try {\r\n//         // 設定收據路徑\r\n//         const receiptPath = path.resolve(__dirname, \".\", `receipt-metamask.json`);\r\n//         console.log(`---------- 收據路徑 ---------- ${receiptPath}`);\r\n\r\n//         // 使用 accounts[0] 部署合約\r\n//         const accounts = await web3.eth.getAccounts();\r\n//         console.log(`嘗試使用帳戶進行部署，帳戶：${accounts[0]}`);\r\n\r\n//         /**\r\n//          * 部署合約需要使用合約介面和合約的 bytecode\r\n//          * 我們從編譯的智能合約中獲取這兩個資訊\r\n//          * 編譯後的智能合約以 JSON 格式保存在 contract 資料夾中\r\n//          */\r\n//         const result = await new web3.eth.Contract(\r\n//             compiledContract.abi\r\n//         )\r\n//             .deploy({ data: \"0x\" + compiledContract.data.bytecode.object, arguments: [mymessage] })\r\n//             .send({ gas: 3000000, from: accounts[0] });\r\n//         console.log(`合約已部署至地址：${result.options.address}`);\r\n\r\n//         // 使用 CircularJson 將嵌套的物件轉換為字串，以便保存為 JSON\r\n//         const serialized = circularJSON.stringify(result.options);\r\n\r\n//         // 將收據地址保存到收據路徑中\r\n//         fs.writeJsonSync(receiptPath, {}, { spaces: 2 });\r\n//         // fs.writeJsonSync(receiptPath, result.options);\r\n\r\n//         console.log(\"收據已成功保存\");\r\n//         return serialized;\r\n//     } catch (error) {\r\n//         console.error(error);\r\n//         return error;\r\n//     }\r\n// };\r\n\r\n// module.exports = deploy;\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,gBAAgB,MAAM,0BAA0B;AAEvD,MAAMC,MAAM,GAAG,MAAOC,SAAS,IAAK;EAClC,IAAI;IACF;IACA,MAAMC,IAAI,GAAG,IAAIJ,IAAI,CAACK,MAAM,CAACC,QAAQ,CAAC;;IAEtC;IACA,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAG,CAACC,eAAe,CAAC,CAAC;IACjDC,OAAO,CAACC,GAAG,CAAE,iBAAgBJ,QAAQ,CAAC,CAAC,CAAE,EAAC,CAAC;;IAE3C;AACJ;AACA;AACA;AACA;IACI,MAAMK,MAAM,GAAG,MAAM,IAAIR,IAAI,CAACI,GAAG,CAACK,QAAQ,CACxCZ,gBAAgB,CAACa,GACnB,CAAC,CACEZ,MAAM,CAAC;MAAEa,IAAI,EAAE,IAAI,GAAGd,gBAAgB,CAACc,IAAI,CAACC,QAAQ,CAACC,MAAM;MAAEC,SAAS,EAAE,CAACf,SAAS;IAAE,CAAC,CAAC,CACtFgB,IAAI,CAAC;MAAEC,GAAG,EAAE,OAAO;MAAEC,IAAI,EAAEd,QAAQ,CAAC,CAAC;IAAE,CAAC,CAAC;IAC5CG,OAAO,CAACC,GAAG,CAAE,YAAWC,MAAM,CAACU,OAAO,CAACC,OAAQ,EAAC,CAAC;;IAEjD;EAEF,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAACA,KAAK,CAAC;IACpB,OAAOA,KAAK;EACd;AACF,CAAC;AAED,eAAetB,MAAM;;AAErB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}