{"ast":null,"code":"'use strict';\n\nconst u = require('universalify').fromCallback;\nconst path = require('path');\nconst fs = require('../fs');\nconst _mkdirs = require('../mkdirs');\nconst mkdirs = _mkdirs.mkdirs;\nconst mkdirsSync = _mkdirs.mkdirsSync;\nconst _symlinkPaths = require('./symlink-paths');\nconst symlinkPaths = _symlinkPaths.symlinkPaths;\nconst symlinkPathsSync = _symlinkPaths.symlinkPathsSync;\nconst _symlinkType = require('./symlink-type');\nconst symlinkType = _symlinkType.symlinkType;\nconst symlinkTypeSync = _symlinkType.symlinkTypeSync;\nconst pathExists = require('../path-exists').pathExists;\nconst {\n  areIdentical\n} = require('../util/stat');\nfunction createSymlink(srcpath, dstpath, type, callback) {\n  callback = typeof type === 'function' ? type : callback;\n  type = typeof type === 'function' ? false : type;\n  fs.lstat(dstpath, (err, stats) => {\n    if (!err && stats.isSymbolicLink()) {\n      Promise.all([fs.stat(srcpath), fs.stat(dstpath)]).then(_ref => {\n        let [srcStat, dstStat] = _ref;\n        if (areIdentical(srcStat, dstStat)) return callback(null);\n        _createSymlink(srcpath, dstpath, type, callback);\n      });\n    } else _createSymlink(srcpath, dstpath, type, callback);\n  });\n}\nfunction _createSymlink(srcpath, dstpath, type, callback) {\n  symlinkPaths(srcpath, dstpath, (err, relative) => {\n    if (err) return callback(err);\n    srcpath = relative.toDst;\n    symlinkType(relative.toCwd, type, (err, type) => {\n      if (err) return callback(err);\n      const dir = path.dirname(dstpath);\n      pathExists(dir, (err, dirExists) => {\n        if (err) return callback(err);\n        if (dirExists) return fs.symlink(srcpath, dstpath, type, callback);\n        mkdirs(dir, err => {\n          if (err) return callback(err);\n          fs.symlink(srcpath, dstpath, type, callback);\n        });\n      });\n    });\n  });\n}\nfunction createSymlinkSync(srcpath, dstpath, type) {\n  let stats;\n  try {\n    stats = fs.lstatSync(dstpath);\n  } catch {}\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath);\n    const dstStat = fs.statSync(dstpath);\n    if (areIdentical(srcStat, dstStat)) return;\n  }\n  const relative = symlinkPathsSync(srcpath, dstpath);\n  srcpath = relative.toDst;\n  type = symlinkTypeSync(relative.toCwd, type);\n  const dir = path.dirname(dstpath);\n  const exists = fs.existsSync(dir);\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type);\n  mkdirsSync(dir);\n  return fs.symlinkSync(srcpath, dstpath, type);\n}\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n};","map":{"version":3,"names":["u","require","fromCallback","path","fs","_mkdirs","mkdirs","mkdirsSync","_symlinkPaths","symlinkPaths","symlinkPathsSync","_symlinkType","symlinkType","symlinkTypeSync","pathExists","areIdentical","createSymlink","srcpath","dstpath","type","callback","lstat","err","stats","isSymbolicLink","Promise","all","stat","then","_ref","srcStat","dstStat","_createSymlink","relative","toDst","toCwd","dir","dirname","dirExists","symlink","createSymlinkSync","lstatSync","statSync","exists","existsSync","symlinkSync","module","exports"],"sources":["C:/Users/wwwna/Desktop/test/node_modules/fs-extra/lib/ensure/symlink.js"],"sourcesContent":["'use strict'\n\nconst u = require('universalify').fromCallback\nconst path = require('path')\nconst fs = require('../fs')\nconst _mkdirs = require('../mkdirs')\nconst mkdirs = _mkdirs.mkdirs\nconst mkdirsSync = _mkdirs.mkdirsSync\n\nconst _symlinkPaths = require('./symlink-paths')\nconst symlinkPaths = _symlinkPaths.symlinkPaths\nconst symlinkPathsSync = _symlinkPaths.symlinkPathsSync\n\nconst _symlinkType = require('./symlink-type')\nconst symlinkType = _symlinkType.symlinkType\nconst symlinkTypeSync = _symlinkType.symlinkTypeSync\n\nconst pathExists = require('../path-exists').pathExists\n\nconst { areIdentical } = require('../util/stat')\n\nfunction createSymlink (srcpath, dstpath, type, callback) {\n  callback = (typeof type === 'function') ? type : callback\n  type = (typeof type === 'function') ? false : type\n\n  fs.lstat(dstpath, (err, stats) => {\n    if (!err && stats.isSymbolicLink()) {\n      Promise.all([\n        fs.stat(srcpath),\n        fs.stat(dstpath)\n      ]).then(([srcStat, dstStat]) => {\n        if (areIdentical(srcStat, dstStat)) return callback(null)\n        _createSymlink(srcpath, dstpath, type, callback)\n      })\n    } else _createSymlink(srcpath, dstpath, type, callback)\n  })\n}\n\nfunction _createSymlink (srcpath, dstpath, type, callback) {\n  symlinkPaths(srcpath, dstpath, (err, relative) => {\n    if (err) return callback(err)\n    srcpath = relative.toDst\n    symlinkType(relative.toCwd, type, (err, type) => {\n      if (err) return callback(err)\n      const dir = path.dirname(dstpath)\n      pathExists(dir, (err, dirExists) => {\n        if (err) return callback(err)\n        if (dirExists) return fs.symlink(srcpath, dstpath, type, callback)\n        mkdirs(dir, err => {\n          if (err) return callback(err)\n          fs.symlink(srcpath, dstpath, type, callback)\n        })\n      })\n    })\n  })\n}\n\nfunction createSymlinkSync (srcpath, dstpath, type) {\n  let stats\n  try {\n    stats = fs.lstatSync(dstpath)\n  } catch {}\n  if (stats && stats.isSymbolicLink()) {\n    const srcStat = fs.statSync(srcpath)\n    const dstStat = fs.statSync(dstpath)\n    if (areIdentical(srcStat, dstStat)) return\n  }\n\n  const relative = symlinkPathsSync(srcpath, dstpath)\n  srcpath = relative.toDst\n  type = symlinkTypeSync(relative.toCwd, type)\n  const dir = path.dirname(dstpath)\n  const exists = fs.existsSync(dir)\n  if (exists) return fs.symlinkSync(srcpath, dstpath, type)\n  mkdirsSync(dir)\n  return fs.symlinkSync(srcpath, dstpath, type)\n}\n\nmodule.exports = {\n  createSymlink: u(createSymlink),\n  createSymlinkSync\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}