{"ast":null,"code":"import Web3 from 'web3';\nimport compiledContract from '../contract/ptTrans.json';\nconst deploy = async mymessage => {\n  try {\n    // 建立 Web3 連接\n    const web3 = new Web3(window.ethereum);\n\n    // 取得帳戶\n    const accounts = await web3.eth.requestAccounts();\n    console.log(`嘗試使用帳戶進行部署，帳戶：${accounts[0]}`);\n\n    /**\r\n     * 部署合約需要使用合約介面和合約的 bytecode\r\n     * 我們從編譯的智能合約中獲取這兩個資訊\r\n     * 編譯後的智能合約以 JSON 格式保存在 contract 資料夾中\r\n     */\n    const result = await new web3.eth.Contract(compiledContract.abi).deploy({\n      data: \"0x\" + compiledContract.data.bytecode.object,\n      arguments: [mymessage]\n    }).send({\n      gas: 3000000,\n      from: accounts[0]\n    });\n    console.log(`合約已部署至地址：${result.options.address}`);\n\n    // 將收據地址儲存到瀏覽器的 Local Storage\n    localStorage.setItem('receiptAddress', result.options.address);\n  } catch (error) {\n    console.error(error);\n    return error;\n  }\n};\nexport default deploy;","map":{"version":3,"names":["Web3","compiledContract","deploy","mymessage","web3","window","ethereum","accounts","eth","requestAccounts","console","log","result","Contract","abi","data","bytecode","object","arguments","send","gas","from","options","address","localStorage","setItem","error"],"sources":["C:/Users/wwwna/Desktop/test/src/ethereum/deploy.js"],"sourcesContent":["import Web3 from 'web3';\r\nimport compiledContract from '../contract/ptTrans.json';\r\n\r\nconst deploy = async (mymessage) => {\r\n  try {\r\n    // 建立 Web3 連接\r\n    const web3 = new Web3(window.ethereum);\r\n    \r\n    // 取得帳戶\r\n    const accounts = await web3.eth.requestAccounts();\r\n    console.log(`嘗試使用帳戶進行部署，帳戶：${accounts[0]}`);\r\n    \r\n    /**\r\n     * 部署合約需要使用合約介面和合約的 bytecode\r\n     * 我們從編譯的智能合約中獲取這兩個資訊\r\n     * 編譯後的智能合約以 JSON 格式保存在 contract 資料夾中\r\n     */\r\n    const result = await new web3.eth.Contract(\r\n      compiledContract.abi\r\n    )\r\n      .deploy({ data: \"0x\" + compiledContract.data.bytecode.object, arguments: [mymessage] })\r\n      .send({ gas: 3000000, from: accounts[0] });\r\n    console.log(`合約已部署至地址：${result.options.address}`);\r\n\r\n    // 將收據地址儲存到瀏覽器的 Local Storage\r\n    localStorage.setItem('receiptAddress', result.options.address);\r\n\r\n  } catch (error) {\r\n    console.error(error);\r\n    return error;\r\n  }\r\n};\r\n\r\nexport default deploy;\r\n"],"mappings":"AAAA,OAAOA,IAAI,MAAM,MAAM;AACvB,OAAOC,gBAAgB,MAAM,0BAA0B;AAEvD,MAAMC,MAAM,GAAG,MAAOC,SAAS,IAAK;EAClC,IAAI;IACF;IACA,MAAMC,IAAI,GAAG,IAAIJ,IAAI,CAACK,MAAM,CAACC,QAAQ,CAAC;;IAEtC;IACA,MAAMC,QAAQ,GAAG,MAAMH,IAAI,CAACI,GAAG,CAACC,eAAe,CAAC,CAAC;IACjDC,OAAO,CAACC,GAAG,CAAE,iBAAgBJ,QAAQ,CAAC,CAAC,CAAE,EAAC,CAAC;;IAE3C;AACJ;AACA;AACA;AACA;IACI,MAAMK,MAAM,GAAG,MAAM,IAAIR,IAAI,CAACI,GAAG,CAACK,QAAQ,CACxCZ,gBAAgB,CAACa,GACnB,CAAC,CACEZ,MAAM,CAAC;MAAEa,IAAI,EAAE,IAAI,GAAGd,gBAAgB,CAACc,IAAI,CAACC,QAAQ,CAACC,MAAM;MAAEC,SAAS,EAAE,CAACf,SAAS;IAAE,CAAC,CAAC,CACtFgB,IAAI,CAAC;MAAEC,GAAG,EAAE,OAAO;MAAEC,IAAI,EAAEd,QAAQ,CAAC,CAAC;IAAE,CAAC,CAAC;IAC5CG,OAAO,CAACC,GAAG,CAAE,YAAWC,MAAM,CAACU,OAAO,CAACC,OAAQ,EAAC,CAAC;;IAEjD;IACAC,YAAY,CAACC,OAAO,CAAC,gBAAgB,EAAEb,MAAM,CAACU,OAAO,CAACC,OAAO,CAAC;EAEhE,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdhB,OAAO,CAACgB,KAAK,CAACA,KAAK,CAAC;IACpB,OAAOA,KAAK;EACd;AACF,CAAC;AAED,eAAexB,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}